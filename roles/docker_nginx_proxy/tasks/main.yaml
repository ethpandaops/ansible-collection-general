- name: Add nginx-proxy user
  ansible.builtin.user:
    name: "{{ docker_nginx_proxy_user }}"
  register: docker_nginx_proxy_user_meta

- name: Create required directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    recurse: true
    owner: "{{ docker_nginx_proxy_user }}"
    group: "{{ docker_nginx_proxy_user }}"
    mode: "0750"
  loop:
    - "{{ docker_nginx_proxy_datadir }}/conf"
    - "{{ docker_nginx_proxy_datadir }}/vhost"
    - "{{ docker_nginx_proxy_datadir }}/certs"
    - "{{ docker_nginx_proxy_datadir }}/acme"

- name: Add nginx config template
  ansible.builtin.copy:
    content: "{{ docker_nginx_proxy_conf_tmpl }}"
    dest: "{{ docker_nginx_proxy_datadir }}/nginx.tmpl"
    owner: "{{ docker_nginx_proxy_user }}"
    group: "{{ docker_nginx_proxy_user }}"
    mode: "0640"

- name: Add custom nginx config files
  ansible.builtin.copy:
    content: "{{ item.value }}"
    dest: "{{ docker_nginx_proxy_datadir }}/conf/{{ item.key }}"
    owner: "{{ docker_nginx_proxy_user }}"
    group: "{{ docker_nginx_proxy_user }}"
    mode: "0640"
  loop: "{{ docker_nginx_proxy_container_custom_config_files | dict2items }}"

- name: Add custom nginx vhost files
  ansible.builtin.copy:
    content: "{{ item.value }}"
    dest: "{{ docker_nginx_proxy_datadir }}/vhost/{{ item.key }}"
    owner: "{{ docker_nginx_proxy_user }}"
    group: "{{ docker_nginx_proxy_user }}"
    mode: "0640"
  loop: "{{ docker_nginx_proxy_container_custom_vhost_files | dict2items }}"


- name: Run nginx proxy container
  community.general.docker_container:
    name: "{{ docker_nginx_proxy_container_name }}"
    image: "{{ docker_nginx_proxy_container_image }}"
    image_name_mismatch: recreate
    published_ports: "{{ docker_nginx_proxy_container_published_ports }}"
    restart_policy: "{{ docker_nginx_proxy_container_restart_policy }}"
    networks: "{{ docker_nginx_proxy_container_networks }}"
    networks_cli_compatible: "{{ docker_nginx_proxy_container_networks_cli_compatible }}"
    network_mode: "{{ docker_nginx_proxy_container_network_mode }}"
    volumes: "{{ docker_nginx_proxy_container_volumes }}"
    env: "{{ docker_nginx_proxy_container_env }}"

- name: Run docker-gen container
  community.general.docker_container:
    name: "{{ docker_nginx_proxy_docker_gen_container_name }}"
    image: "{{ docker_nginx_proxy_docker_gen_container_image }}"
    image_name_mismatch: recreate
    platform: "{{ 'linux/arm/v7' if 'arm' in ansible_architecture else omit }}" # bug: There's no v8 arm image available
    command: "{{ docker_nginx_proxy_docker_gen_container_command }}"
    restart_policy: "{{ docker_nginx_proxy_docker_gen_container_restart_policy }}"
    networks: "{{ docker_nginx_proxy_acme_companion_container_networks }}"
    networks_cli_compatible: "{{ docker_nginx_proxy_docker_gen_container_networks_cli_compatible }}"
    network_mode: "{{ docker_nginx_proxy_docker_gen_container_network_mode }}"
    volumes: "{{ docker_nginx_proxy_docker_gen_container_volumes }}"
    env: "{{ docker_nginx_proxy_docker_gen_container_env }}"
    volumes_from: "{{ docker_nginx_proxy_docker_gen_container_volumes_from }}"

- name: Run acme companion container
  community.general.docker_container:
    name: "{{ docker_nginx_proxy_acme_companion_container_name }}"
    image: "{{ docker_nginx_proxy_acme_companion_container_image }}"
    image_name_mismatch: recreate
    platform: "{{ 'linux/arm/v7' if 'arm' in ansible_architecture else omit }}" # bug: There's no v8 arm image available
    restart_policy: "{{ docker_nginx_proxy_acme_companion_container_restart_policy }}"
    networks: "{{ docker_nginx_proxy_acme_companion_container_networks }}"
    networks_cli_compatible: "{{ docker_nginx_proxy_acme_companion_container_networks_cli_compatible }}"
    network_mode: "{{ docker_nginx_proxy_acme_companion_container_network_mode }}"
    volumes: "{{ docker_nginx_proxy_acme_companion_container_volumes }}"
    env: "{{ docker_nginx_proxy_acme_companion_container_env }}"
    volumes_from: "{{ docker_nginx_proxy_docker_gen_container_volumes_from }}"
  when: docker_nginx_proxy_acme_companion_enabled | bool

- name: Create ACME monitor script
  ansible.builtin.copy:
    src: acme-monitor.sh
    dest: "{{ docker_nginx_proxy_datadir }}/acme-monitor.sh"
    owner: "{{ docker_nginx_proxy_user }}"
    group: "{{ docker_nginx_proxy_user }}"
    mode: "0750"
  when: docker_nginx_proxy_acme_monitor_enabled

- name: Run ACME retry monitor sidecontainer
  community.general.docker_container:
    name: "{{ docker_nginx_proxy_acme_monitor_container_name }}"
    image: "{{ docker_nginx_proxy_acme_monitor_container_image }}"
    image_name_mismatch: recreate
    command: ["/acme-monitor.sh"]
    restart_policy: "{{ docker_nginx_proxy_acme_monitor_container_restart_policy }}"
    networks: "{{ docker_nginx_proxy_acme_monitor_container_networks }}"
    networks_cli_compatible: "{{ docker_nginx_proxy_acme_monitor_container_networks_cli_compatible }}"
    network_mode: "{{ docker_nginx_proxy_acme_monitor_container_network_mode }}"
    volumes: "{{ docker_nginx_proxy_acme_monitor_container_volumes + [docker_nginx_proxy_datadir + '/acme-monitor.sh:/acme-monitor.sh:ro'] }}"
    env: "{{ docker_nginx_proxy_acme_monitor_container_env }}"
  when: docker_nginx_proxy_acme_monitor_enabled

# --- wildcard: ensure templates dir
- name: Create docker-gen templates dir (wildcard)
  ansible.builtin.file:
    path: "{{ docker_nginx_proxy_templates_dir }}"
    state: directory
    owner: "{{ docker_nginx_proxy_user }}"
    group: "{{ docker_nginx_proxy_user }}"
    mode: "0750"
  when: docker_nginx_proxy_wildcard_enabled | bool

# --- wildcard: install symlink template
- name: Create wildcard symlink template
  ansible.builtin.copy:
    src: wildcard-symlinks.tmpl
    dest: "{{ docker_nginx_proxy_templates_dir }}/wildcard-symlinks.tmpl"
    owner: "{{ docker_nginx_proxy_user }}"
    group: "{{ docker_nginx_proxy_user }}"
    mode: "0644"
  when: docker_nginx_proxy_wildcard_enabled | bool

# --- wildcard: fetcher (curl+openssl+tar) to pull bundle and reload proxy
- name: Run wildcard cert fetcher sidecar
  community.general.docker_container:
    name: "{{ docker_nginx_proxy_wildcard_fetcher_container_name }}"
    image: "{{ docker_nginx_proxy_wildcard_fetcher_container_image }}"
    image_name_mismatch: recreate
    restart_policy: always
    entrypoint: ["/bin/sh","-c"]
    volumes:
      - "{{ docker_nginx_proxy_datadir }}/certs:/etc/nginx/certs"
    env:
      WILDCARD_CERT_URL: "{{ docker_nginx_proxy_wildcard_cert_url }}"
      WILDCARD_CERT_PSK: "{{ docker_nginx_proxy_wildcard_cert_psk }}"
      WILDCARD_CERT_NAME: "{{ docker_nginx_proxy_wildcard_cert }}"
      FETCH_INTERVAL: "{{ docker_nginx_proxy_wildcard_fetch_interval | string }}"
      NGINX_PROXY_NAME: "{{ docker_nginx_proxy_container_name }}"
    command: |
      set -eu
      while true; do
        TMP="$(mktemp -d)"; trap 'rm -rf "$TMP"' INT TERM EXIT
        echo "Fetching ${WILDCARD_CERT_URL}"
        if curl -fsS -o "${TMP}/bundle.enc" "${WILDCARD_CERT_URL}"; then
          # decrypt: matches issuer's openssl enc -aes-256-cbc -salt
          openssl enc -d -aes-256-cbc -pass env:WILDCARD_CERT_PSK \
            -in "${TMP}/bundle.enc" -out "${TMP}/bundle.tar.gz"
          tar -xzf "${TMP}/bundle.tar.gz" -C /etc/nginx/certs
          # reload nginx-proxy (best-effort)
          if command -v docker >/dev/null 2>&1; then
            docker kill -s HUP "${NGINX_PROXY_NAME}" >/dev/null 2>&1 || true
          fi
        fi
        sleep "${FETCH_INTERVAL}"
      done
  when: docker_nginx_proxy_wildcard_enabled | bool

# --- wildcard: docker-gen watcher to create per-vhost symlinks & HUP nginx-proxy
- name: Run docker-gen symlinker for wildcard cert
  community.general.docker_container:
    name: "{{ docker_nginx_proxy_wildcard_symlinker_container_name }}"
    image: "{{ docker_nginx_proxy_wildcard_symlinker_container_image }}"
    image_name_mismatch: recreate
    restart_policy: always
    # share volumes with nginx-proxy for /etc/nginx/certs
    volumes_from:
      - "{{ docker_nginx_proxy_container_name }}"
    volumes:
      - "/var/run/docker.sock:/tmp/docker.sock:ro"
      - "{{ docker_nginx_proxy_templates_dir }}/wildcard-symlinks.tmpl:/etc/docker-gen/templates/wildcard-symlinks.tmpl:ro"
      - "{{ docker_nginx_proxy_datadir }}/certs:/etc/nginx/certs"
    env:
      WILDCARD_CERT_NAME: "{{ docker_nginx_proxy_wildcard_cert }}"
    command:
      - /usr/local/bin/docker-gen
      - -watch
      - -only-exposed
      - -notify
      - /bin/sh /etc/nginx/certs/wildcard-symlinks.sh
      - -notify-sighup
      - "{{ docker_nginx_proxy_container_name }}"
      - /etc/docker-gen/templates/wildcard-symlinks.tmpl
      - /etc/nginx/certs/wildcard-symlinks.sh
  when: docker_nginx_proxy_wildcard_enabled | bool