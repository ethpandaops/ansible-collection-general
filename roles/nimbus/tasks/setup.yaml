- name: Add nimbus user
  ansible.builtin.user:
    name: "{{ nimbus_user }}"
  register: nimbus_user_meta

- name: Create data dir
  ansible.builtin.file:
    path: "{{ nimbus_datadir }}"
    state: directory
    mode: "0700"
    owner: "{{ nimbus_user }}"
    group: "{{ nimbus_user }}"

- name: Set permissions
  ansible.builtin.command: "chown -R {{ nimbus_user }}:{{ nimbus_user }} {{ nimbus_datadir }}" # noqa no-free-form
  changed_when: false

- name: Create validator data dir
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: "0750"
    owner: "{{ nimbus_user }}"
    group: "{{ nimbus_user }}"
  loop:
    - "{{ nimbus_validator_datadir }}"
    - "{{ nimbus_validator_datadir }}/keys"
    - "{{ nimbus_validator_datadir }}/secrets"
  when: nimbus_validator_enabled

- name: Set permissions for validator data dir
  ansible.builtin.command: "chown -R {{ nimbus_user }}:{{ nimbus_user }} {{ nimbus_validator_datadir }}" # noqa no-free-form
  changed_when: false
  when: nimbus_validator_enabled

- name: Checkpoint sync nimbus node
  when: nimbus_checkpoint_sync_enabled
  community.docker.docker_container:
    name: "{{ nimbus_checkpoint_container_name }}"
    image: "{{ nimbus_container_image }}"
    image_name_mismatch: recreate
    state: started
    detach: false
    auto_remove: "{{ nimbus_checkpoint_autoremove_enabled }}"
    restart_policy: "no"
    stop_timeout: "{{ nimbus_container_stop_timeout }}"
    volumes: "{{ nimbus_container_volumes }}"
    env: "{{ nimbus_container_env }}"
    networks: "{{ nimbus_container_networks }}"
    command: "{{ nimbus_checkpoint_container_command + nimbus_checkpoint_container_command_extra_args }}"
    user: "{{ nimbus_user_meta.uid }}"
    security_opts: "{{ nimbus_container_security_opts }}"

- name: Run nimbus container
  community.docker.docker_container:
    name: "{{ nimbus_container_name }}"
    image: "{{ nimbus_container_image }}"
    image_name_mismatch: recreate
    state: started
    restart_policy: always
    stop_timeout: "{{ nimbus_container_stop_timeout }}"
    ports: "{{ nimbus_container_ports }}"
    volumes: >-
      {{
        nimbus_validator_enabled | ternary(
          nimbus_container_volumes + nimbus_container_validator_volumes,
          nimbus_container_volumes
        )
      }}
    env: "{{ nimbus_container_env }}"
    networks: "{{ nimbus_container_networks }}"
    entrypoint: "{{ nimbus_container_entrypoint | default(omit) }}"
    command: >-
      {{
        nimbus_validator_enabled | ternary(
          nimbus_container_command + nimbus_container_validator_args + nimbus_container_command_extra_args +
          (nimbus_mev_boost_enabled | ternary(nimbus_mev_boost_beacon_command, [])),
          nimbus_container_command + nimbus_container_command_extra_args,
        )
      }}
    user: "{{ nimbus_user_meta.uid }}"
    pull: "{{ nimbus_container_pull | bool }}"
    security_opts: "{{ nimbus_container_security_opts }}"
