- name: Prepare system to be used by ansible
  ansible.builtin.include_tasks:
    file: prepare/main.yml

# Create default user
- name: Ensure default user exists
  when: bootstrap_default_user_create | bool
  tags: [bootstrap-default-user]
  vars:
    ansible_user: "{{ bootstrap_ansible_user | default(bootstrap_default_user) }}"
  block:
    - name: Create default user group
      ansible.builtin.group:
        name: "{{ bootstrap_default_user }}"
        state: present

    - name: Create default user account
      ansible.builtin.user:
        name: "{{ bootstrap_default_user }}"
        groups: "{{ bootstrap_default_user }},sudo"
        append: true

    - name: Allow default user to sudo without a password
      ansible.builtin.lineinfile:
        dest: "{{ bootstrap_sudoers_file_path }}"
        state: "present"
        regexp: "^%{{ bootstrap_default_user }}"
        line: "%{{ bootstrap_default_user }} ALL=(ALL) NOPASSWD: ALL"

    - name: Validate that SSH keys are defined
      tags: [bootstrap-ssh-keys]
      ansible.builtin.assert:
        that:
          - (bootstrap_default_user_authorized_keys_plain | length > 0) or
            (bootstrap_default_user_authorized_keys_github | length > 0)
        fail_msg: "bootstrap_default_user_authorized_keys_plain or bootstrap_default_user_authorized_keys_github is not defined"

    - name: Create SSH keys directory
      tags: [bootstrap-ssh-keys]
      ansible.builtin.file:
        path: "{{ bootstrap_default_user_authorized_keys_dir }}"
        state: directory
        mode: '0700'
        owner: "{{ bootstrap_default_user }}"
        group: "{{ bootstrap_default_user }}"

    - name: Setup SSH keys
      tags: [bootstrap-ssh-keys, bootstrap-ssh-keys-only]
      ansible.builtin.copy:
        content: "{{ bootstrap_default_user_authorized_keys }}"
        dest: "{{ bootstrap_default_user_authorized_keys_file }}"
        mode: '0600'
        owner: "{{ bootstrap_default_user }}"
        group: "{{ bootstrap_default_user }}"

# Set hostname to inventory hostname by default
- name: Set hostname
  ansible.builtin.hostname:
    name: "{{ inventory_hostname }}"
  register: bootstrap_hostname
  when: bootstrap_hostname_set

- name: Add self to /etc/hosts
  ansible.builtin.lineinfile:
    dest: /etc/hosts
    line: '{{ ansible_host }} {{ inventory_hostname }}'
  when: bootstrap_hostname_set

# Keep SSH_AUTH_SOCK when using sudo
- name: Add self to /etc/hosts
  ansible.builtin.lineinfile:
    dest: /etc/sudoers
    line: Defaults    env_keep += "SSH_AUTH_SOCK"

# Harden SSHD config
- name: Harden sshd config
  when: bootstrap_harden_sshd_config | bool
  block:
    - name: Disable root login
      ansible.builtin.lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: "^PermitRootLogin"
        line: "PermitRootLogin no"
        state: present
      notify:
        - Restart sshd
    - name: Disable password login
      ansible.builtin.lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: "^PasswordAuthentication"
        line: "PasswordAuthentication no"
        state: present
      notify:
        - Restart sshd

# Update APT cache
- name: Update Repository cache
  ansible.builtin.apt:
    update_cache: true
    cache_valid_time: 3600
    force_apt_get: true

# Install common packages
- name: Install common packages
  ansible.builtin.package:
    name: "{{ bootstrap_default_common_packages }}"
    state: present

# Configure NTP
- name: Configure NTP
  when: bootstrap_ntp_enabled | bool
  tags: ["bootstrap_ntp"]
  block:
    - name: Ensure chrony is installed
      ansible.builtin.package:
        name: chrony
        state: present

    - name: Start chrony
      ansible.builtin.service:
        name: chrony
        state: started

    - name: Configure chrony sources
      ansible.builtin.copy:
        content: |
          {% for ntp_server in bootstrap_ntp_servers %}
          server {{ ntp_server }} iburst
          {% endfor %}
        dest: /etc/chrony/sources.d/local-ntp-server.sources
        mode: '0644'
        owner: root
      notify:
        - Reload chrony

# Disable swap
- name: Disable SWAP in fstab
  tags: ["bootstrap_swap"]
  ansible.builtin.replace:
    path: /etc/fstab
    regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
    replace: '# \1'
  when: bootstrap_swap_disable
  notify: Disable SWAP

# Allow installing python packages system wide
- name: Check system python version
  community.general.python_requirements_info:
  register: bootstrap_python_system_version

- name: Enable system wide python package management by removing the 'EXTERNALLY-MANAGED' file
  ansible.builtin.file:
    path: "{{ item }}/EXTERNALLY-MANAGED"
    state: absent
  loop: "{{ bootstrap_python_system_version.python_system_path }}"

# Reboot the machine if required
- name: Check if reboot required
  ansible.builtin.stat:
    path: /var/run/reboot-required
  register: bootstrap_reboot_required_file

- name: Set reboot required
  ansible.builtin.set_fact:
    bootstrap_reboot_required: true
  when: >-
    bootstrap_reboot_if_required and
    (
      bootstrap_reboot_required_file.stat.exists
      or ( (bootstrap_hostname is defined) and bootstrap_hostname.changed)
    )

- name: Handle reboot
  when: bootstrap_reboot_required|default(false)
  block:
    - name: Flush handlers
      ansible.builtin.meta: flush_handlers
    - name: Reboot
      ansible.builtin.reboot:
