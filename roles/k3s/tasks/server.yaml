- name: Copy K3s service file
  register: k3s_service
  ansible.builtin.template:
    src: "k3s-server.service.j2"
    dest: "{{ k3s_systemd_dir }}/k3s-server.service"
    owner: root
    group: root
    mode: "0644"

- name: Create directory .kube
  ansible.builtin.file:
    path: ~/{{ ansible_user }}/.kube
    state: directory
    owner: "{{ ansible_user }}"
    mode: "u=rwx,g=rx,o="

- name: Copy config file to user home directory
  ansible.builtin.copy:
    src: /etc/rancher/k3s/k3s.yaml
    dest: ~/{{ ansible_user }}/.kube/config
    remote_src: true
    owner: "{{ ansible_user }}"
    mode: "u=rw,g=,o="

- name: Create dir for /etc/rancher/k3s/config.yaml.d
  ansible.builtin.file:
    path: /etc/rancher/k3s/config.yaml.d
    state: directory
    owner: root
    group: root
    mode: '0755'
  when: k3s_etcd_enabled and k3s_etcd_snapshot_enabled

- name: Create backup file for etcd
  ansible.builtin.template:
    src: "k3s-etcd-backup.yaml.j2"
    dest: "/etc/rancher/k3s/config.yaml.d/etcd-backup.yaml"
    owner: root
    group: root
    mode: "0644"
  when: k3s_etcd_enabled and k3s_etcd_snapshot_enabled

- name: Enable and check K3s service
  ansible.builtin.systemd:
    name: k3s-server
    daemon_reload: true
    state: restarted
    enabled: true

- name: Wait for node-token
  ansible.builtin.wait_for:
    path: "{{ k3s_server_location }}/server/node-token"

- name: Register node-token file access mode
  ansible.builtin.stat:
    path: "{{ k3s_server_location }}/server/node-token"
  register: p

- name: Change file access node-token
  ansible.builtin.file:
    path: "{{ k3s_server_location }}/server/node-token"
    mode: "g+rx,o+rx"

- name: Read node-token from master
  ansible.builtin.slurp:
    path: "{{ k3s_server_location }}/server/node-token"
  register: k3s_node_token

- name: Store Master node-token
  ansible.builtin.set_fact:
    k3s_token: "{{ k3s_node_token.content | b64decode | regex_replace('\n', '') }}"

- name: Restore node-token file access
  ansible.builtin.file:
    path: "{{ k3s_server_location }}/server/node-token"
    mode: "{{ p.stat.mode }}"

- name: Replace https://localhost:6443 by https://master-ip:6443
  ansible.builtin.command: >-
    k3s kubectl config set-cluster default
      --server=https://{{ k3s_server_ip }}:6443
      --kubeconfig ~/{{ ansible_user }}/.kube/config
  changed_when: true

- name: Create kubectl symlink
  ansible.builtin.file:
    src: /usr/local/bin/k3s
    dest: /usr/local/bin/kubectl
    state: link

- name: Create crictl symlink
  ansible.builtin.file:
    src: /usr/local/bin/k3s
    dest: /usr/local/bin/crictl
    state: link

- name: Install Calico for k3s
  when: k3s_calico
  block:
    - name: Check if custom Calico resources are defined
      ansible.builtin.set_fact:
        custom_resources_defined: "{{ k3s_calico_custom_resources is defined and k3s_calico_custom_resources | trim | length > 0 }}"

    - name: Create calico directory
      ansible.builtin.file:
        path: "{{ k3s_server_location }}/server/calico"
        state: directory
        owner: root
        group: root
        mode: "0755"

    - name: Download tigera-operator.yaml
      ansible.builtin.get_url:
        url: "https://raw.githubusercontent.com/projectcalico/calico/{{ k3s_calico_version }}/manifests/tigera-operator.yaml"
        dest: "{{ k3s_server_location }}/server/calico/tigera-operator.{{ k3s_calico_version }}.yaml"
        owner: root
        group: root
        mode: "0644"
      register: download_tigera_operator

    - name: Remove existing custom resources
      ansible.builtin.command:
        cmd: k3s kubectl delete -f {{ k3s_server_location }}/server/calico/custom-resources.yaml
      ignore_errors: true

    - name: Apply tigera-operator.yaml with --force-conflicts
      ansible.builtin.command:
        cmd: >
          k3s kubectl apply --server-side --force-conflicts -f
          {{ k3s_server_location }}/server/calico/tigera-operator.{{ k3s_calico_version }}.yaml
      when: download_tigera_operator.changed
      register: apply_tigera_operator
      retries: 5
      delay: 10
      until: apply_tigera_operator is succeeded

    - name: Write custom resources to file
      ansible.builtin.copy:
        dest: "{{ k3s_server_location }}/server/calico/custom-resources.yaml"
        content: "{{ k3s_calico_custom_resources }}"
        mode: "0644"
      when: custom_resources_defined

    - name: Download default custom-resources.yaml
      ansible.builtin.get_url:
        url: "https://raw.githubusercontent.com/projectcalico/calico/{{ k3s_calico_version }}/manifests/custom-resources.yaml"
        dest: "{{ k3s_server_location }}/server/calico/custom-resources.yaml"
        owner: root
        group: root
        mode: "0644"
      when: not custom_resources_defined

    - name: Apply custom-resources.yaml
      ansible.builtin.command:
        cmd: >
          k3s kubectl apply --server-side -f
          {{ k3s_server_location }}/server/calico/custom-resources.yaml
      register: apply_custom_resources
      retries: 5
      delay: 10
      until: apply_custom_resources is succeeded
