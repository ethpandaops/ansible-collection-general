eth_inventory_web_dir: /data/eth-inventory-web # noqa var-naming[no-role-prefix]

eth_inventory_web_container_image: nginx:alpine # noqa var-naming[no-role-prefix]
eth_inventory_web_container_name: eth-inventory-web # noqa var-naming[no-role-prefix]
eth_inventory_web_container_published_ports: [] # noqa var-naming[no-role-prefix]
eth_inventory_web_container_restart_policy: always # noqa var-naming[no-role-prefix]
eth_inventory_web_container_networks_cli_compatible: true # noqa var-naming[no-role-prefix]
eth_inventory_web_container_network_mode: default # noqa var-naming[no-role-prefix]
eth_inventory_web_container_networks: [] # noqa var-naming[no-role-prefix]
eth_inventory_web_container_env: {} # noqa var-naming[no-role-prefix]
eth_inventory_web_container_volumes_from: [] # noqa var-naming[no-role-prefix]
eth_inventory_web_container_volumes: # noqa var-naming[no-role-prefix]
  - "{{ eth_inventory_web_dir }}/content:/usr/share/nginx/html:ro"
  - "{{ eth_inventory_web_dir }}/nginx-conf/default.conf:/etc/nginx/conf.d/default.conf:ro"

eth_inventory_web_content: # noqa var-naming[no-role-prefix]
  - file: v1/validator-ranges.json
    content: |
      {
        "ranges": {
          {% for k, v in ethereum_genesis_validator_keyranges.items() | sort(attribute='1.start') %}
          "{{ v.start }}-{{ v.end - 1 }}": "{{ k }}"{% if not loop.last %},{% endif %}
          {% endfor %}
        }
      }
    when: ethereum_genesis_validator_keyranges is defined
  - file: v1/inventory.json
    content: |
      {
        "ethereum_pairs": {
          {% for host in (groups['ethereum_node'] + groups['bootnode']) | sort %}
            "{{ host }}": {
              "consensus": {
                "client": "{{ hostvars[host]['ethereum_node_cl'] }}",
                "image": "{{ hostvars[host][(hostvars[host]['ethereum_node_cl']) + '_container_image'] }}",
                "enr": "{{ hostvars[host]['ethereum_node_fact_cl_enr'] }}",
                "peer_id": "{{ hostvars[host]['ethereum_node_fact_cl_peer_id'] }}",
                "beacon_uri": "https://{{ hostvars[host]['ethereum_node_beacon_hostname'] }}"
              },
              "execution": {
                "client": "{{ hostvars[host]['ethereum_node_el'] }}",
                "image": "{{ hostvars[host][(hostvars[host]['ethereum_node_el']) + '_container_image'] }}",
                "enode": "{{ hostvars[host]['ethereum_node_fact_el_enode'] | default('') }}",
                "rpc_uri": "https://{{ hostvars[host]['ethereum_node_rcp_hostname'] }}"
              }
            }{% if not loop.last %},{% endif %}
          {% endfor %}
        }
      }

eth_inventory_web_nginx_config: | # noqa var-naming[no-role-prefix]
  server {
      listen       80;
      server_name  localhost;

      location / {
          if ($request_method = 'OPTIONS') {
              add_header 'Access-Control-Allow-Origin' '*';
              add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
              #
              # Custom headers and headers various browsers *should* be OK with but aren't
              #
              add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
              #
              # Tell client that this pre-flight info is valid for 20 days
              #
              add_header 'Access-Control-Max-Age' 1728000;
              add_header 'Content-Type' 'text/plain; charset=utf-8';
              add_header 'Content-Length' 0;
              return 204;
          }
          if ($request_method = 'POST') {
              add_header 'Access-Control-Allow-Origin' '*' always;
              add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
              add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
              add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
          }
          if ($request_method = 'GET') {
              add_header 'Access-Control-Allow-Origin' '*' always;
              add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
              add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
              add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
          }
          root   /usr/share/nginx/html;
          index  index.html index.htm;
      }

      error_page   500 502 503 504  /50x.html;
      location = /50x.html {
          root   /usr/share/nginx/html;
      }
  }
