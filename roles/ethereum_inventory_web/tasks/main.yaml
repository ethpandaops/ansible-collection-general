# Load facts from Ansible's fact cache to avoid remote connections
- name: Set fact cache directory
  ansible.builtin.set_fact:
    fact_cache_dir: "{{ eth_inventory_web_fact_cache_dir | default('tmp/devnet-4') }}"
  run_once: true

- name: Find all cached fact files
  ansible.builtin.find:
    paths: "{{ fact_cache_dir }}"
    patterns: "*"
    file_type: file
  register: fact_files
  delegate_to: localhost
  run_once: true

- name: Build hostvars from cached facts
  ansible.builtin.set_fact:
    hostvars: |
      {% set ns = namespace(hostvars={}) %}
      {% for file in fact_files.files %}
        {% set hostname = file.path | basename %}
        {% set content = lookup('file', file.path) | from_json %}
        {% set _ = ns.hostvars.update({hostname: content}) %}
      {% endfor %}
      {{ ns.hostvars }}
  when: fact_files.files | length > 0
  run_once: true

- name: Create nginx-conf dir
  ansible.builtin.file:
    path: "{{ eth_inventory_web_dir }}/nginx-conf"
    state: directory
    recurse: true

- name: Copy nginx config
  ansible.builtin.copy:
    content: "{{ eth_inventory_web_nginx_config }}"
    dest: "{{ eth_inventory_web_dir }}/nginx-conf/default.conf"
    mode: "0644"

- name: Create directories
  ansible.builtin.file:
    path: "{{ (eth_inventory_web_dir + '/content/' + item.file) | dirname }}"
    state: directory
    recurse: true
  loop: "{{ eth_inventory_web_content }}"

- name: Copy content files
  ansible.builtin.copy:
    content: "{{ item.content }}"
    dest: "{{ eth_inventory_web_dir }}/content/{{ item.file }}"
    mode: "0644"
  loop: "{{ eth_inventory_web_content }}"

- name: Generate YAML from JSON files
  ansible.builtin.copy:
    content: "{{ item.content | to_nice_yaml(sort_keys=true, indent=2) }}"
    dest: "{{ eth_inventory_web_dir }}/content/{{ item.file | replace('.json', '.yaml') }}"
    mode: "0644"
  loop: "{{ eth_inventory_web_content }}"
  when: item.file is match('.*\.json$')

- name: Run nginx container
  community.general.docker_container:
    name: "{{ eth_inventory_web_container_name }}"
    image: "{{ eth_inventory_web_container_image }}"
    image_name_mismatch: recreate
    published_ports: "{{ eth_inventory_web_container_published_ports }}"
    restart_policy: "{{ eth_inventory_web_container_restart_policy }}"
    networks: "{{ eth_inventory_web_container_networks }}"
    networks_cli_compatible: "{{ eth_inventory_web_container_networks_cli_compatible }}"
    network_mode: "{{ eth_inventory_web_container_network_mode }}"
    volumes: "{{ eth_inventory_web_container_volumes }}"
    env: "{{ eth_inventory_web_container_env }}"