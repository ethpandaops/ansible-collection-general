# Expects: zone_item (dict with keys: zone, content)
# Uses: dns_server_zonesdir, dns_server_uid, dns_server_zonecheck_image, dns_server_serial_min_base

- name: Set per-zone paths
  ansible.builtin.set_fact:
    zone_name: "{{ zone_item.zone }}"
    dest_zone: "{{ dns_server_zonesdir }}/{{ zone_item.zone }}"
    stage_zone: "{{ dns_server_zonesdir }}/{{ zone_item.zone }}.staged"

- name: Write staged zone (original Ansible content)
  ansible.builtin.copy:
    content: "{{ zone_item.content }}"
    dest: "{{ stage_zone }}"
    owner: "{{ dns_server_uid }}"
    group: "{{ dns_server_uid }}"
    mode: "0644"
  register: staged_copy

- name: Slurp existing productive zone (if present)
  ansible.builtin.slurp:
    path: "{{ dest_zone }}"
  register: existing_zone_b64
  ignore_errors: true
  when: staged_copy.changed

- name: Slurp staged zone
  ansible.builtin.slurp:
    path: "{{ stage_zone }}"
  register: staged_zone_b64
  when: staged_copy.changed

- name: Decode zone contents
  ansible.builtin.set_fact:
    existing_zone_content: "{{ (existing_zone_b64.content | default('') | b64decode) | default('') }}"
    staged_zone_content:   "{{ (staged_zone_b64.content   | b64decode) }}"
  when: staged_copy.changed

- name: Extract current serial from existing zone
  ansible.builtin.set_fact:
    existing_serial: >-
      {{
        (existing_zone_content
          | regex_search('\(\s*(\d+)\s*;\s*Serial', '\1')
          | default(['0']))
        | first
      }}
  when: staged_copy.changed

- name: Compute next serial (monotonic)
  ansible.builtin.set_fact:
    next_serial: >-
      {{
        [
          (existing_serial | int) + 1,
          (dns_server_serial_min_base | int)
        ] | max
      }}
  when: staged_copy.changed

- name: Build final productive zone content (with correct serial)
  ansible.builtin.set_fact:
    final_zone_content: >-
      {{
        staged_zone_content
        | regex_replace('(?m)^\s*\d+(?=\s*;\s*Serial)', next_serial|string)
      }}
  when: staged_copy.changed

- debug:
    msg:
      - "zone name:  {{ zone_name }}"
      - "old serial: {{ existing_serial }}"
      - "new serial: {{ next_serial }}"
  when: staged_copy.changed

- name: Install productive zone when changed or missing
  ansible.builtin.copy:
    content: "{{ final_zone_content }}"
    dest: "{{ dest_zone }}"
    owner: "{{ dns_server_uid }}"
    group: "{{ dns_server_uid }}"
    mode: "0644"
  when: staged_copy.changed
  notify: Reload DNS server container
