# Used to cleanup the hive installation
hive_cleanup: false

hive_repo_address: "https://github.com/ethereum/hive.git"
hive_repo_version: "master"
hive_repo_remote: "origin"

hive_systemd_service_name: "hive.service"

hive_dir: "/data/hive"
hive_dir_bin: "{{ hive_dir }}/bin"
hive_dir_source: "{{ hive_dir }}/src"
hive_dir_scripts: "{{ hive_dir }}/scripts"
hive_dir_results: "{{ hive_dir }}/results"
hive_dir_web: "{{ hive_dir }}/web"

hive_container_www_name: "nginx-hive"
hive_container_www_image: "nginx:1.27.3-alpine"
hive_container_www_env: {}
hive_container_www_ports:
  - "127.0.0.1:8080:80"
hive_container_www_volumes:
  - "{{ hive_dir_web }}:/usr/share/nginx/html"
  - "{{ hive_dir_results }}:/usr/share/nginx/html/results"
hive_container_www_networks: []
hive_container_www_restart_policy: "always"
hive_container_www_stop_timeout: 10


hive_log_level: 3 # Log level for system events. Supports values 0-5. (default 3)
hive_log_level_simulator: 3 #  Selects log level of client instances. Supports values 0-5. (default 3)

# Always pull / build the latest container images
hive_simulations_build_images_once: true
# Global flags provided to all test runs
hive_simulations_global_flags:
  - --sim.loglevel={{ hive_log_level_simulator }}
  - --loglevel={{ hive_log_level }}
  # Uncomment to disable docker cache and always rebuild images on every simulation run
  # - --docker.nocache=.
# Exclude these containers from cleanup /
hive_simulations_container_cleanup_exclusions:
  - telegraf
  - nginx
  - logsprout
  - papertrail
  - rsyslog
  - vector
  - node_exporter
  - prometheus
  - grafana

# Prune test results older than this value
hive_simulations_prune_test_results_older_than: 168h # 7 days

# Custom client configuration
# https://github.com/ethereum/hive/blob/master/docs/commandline.md#client-build-parameters
#
# This can be used to override branches, tags, etc.
# The test runs will filter which client configs
# should be used based on the client name.
hive_simulations_client_config: []

# =================================
# Example, using custom docker images
# =================================
#  - client: go-ethereum
#    build_args:
#      baseimage: your-repo/go-ethereum
#      tag: latest

# =================================
# Example, building from git and using custom branches for prague-devnet-4
# =================================
#  - client: go-ethereum
#    nametag: prague-devnet-4
#    dockerfile: git
#    build_args:
#      github: lightclient/go-ethereum
#      tag: prague-devnet-4

#  - client: nethermind
#    nametag: prague-devnet-4
#    dockerfile: git
#    build_args:
#      github: NethermindEth/nethermind
#      tag: pectra_devnet_4

#  - client: reth
#    nametag: prague-devnet-4
#    dockerfile: git
#    build_args:
#      github: paradigmxyz/reth
#      tag: onbjerg/devnet-4

#  - client: besu
#    nametag: prague-devnet-4
#    dockerfile: git
#    build_args:
#      github: hyperledger/besu
#      tag: pectra-devnet-4

#  - client: ethereumjs
#    nametag: prague-devnet-4
#    build_args:
#      github: ethereumjs/ethereumjs-monorepo
#      tag: 7702-devnet-4-plus-t8ntool

#  - client: erigon
#    nametag: prague-devnet-4
#    dockerfile: git
#    build_args:
#      github: erigontech/erigon
#      tag: pectra_e2

# Tests to run
hive_simulations_tests:
  # Sync tests
  - simulator: ethereum/sync
    clients:
      - besu
      - erigon
      - ethereumjs
      - go-ethereum
      - nethermind
      - nimbus-el
      - reth
    extra_flags:
      - --client.checktimelimit=60s
      # - --sim.timelimit=10m

  # # GraphQL tests (only supported by besu, geth, nimbus-el)
  # - simulator: ethereum/graphql
  #   clients:
  #     - besu
  #     - go-ethereum
  #     - nimbus-el
  #   extra_flags:
  #     - --client.checktimelimit=60s
  #     - --sim.timelimit=5m

  # # DevP2P tests
  # - simulator: devp2p
  #   clients:
  #     - besu
  #     - erigon
  #     - ethereumjs
  #     - go-ethereum
  #     - nethermind
  #     - nimbus-el
  #     - reth
  #   extra_flags:
  #     - --client.checktimelimit=60s
  #     - --sim.timelimit=10m

  # # Pyspec tests
  # - simulator: ethereum/pyspec
  #   clients:
  #     - besu
  #     - erigon
  #     - ethereumjs
  #     - go-ethereum
  #     - nethermind
  #     - nimbus-el
  #     - reth
  #   extra_flags:
  #     - --client.checktimelimit=3m
  #     - --sim.timelimit=60s
  #     - --sim.parallelism=4

  # # RPC tests
  # - simulator: ethereum/rpc$
  #   clients:
  #     - besu
  #     - erigon
  #     - ethereumjs
  #     - go-ethereum
  #     - nethermind
  #     - nimbus-el
  #     - reth
  #   extra_flags:
  #     - --client.checktimelimit=60s
  #     - --sim.timelimit=8m

  # # Consensus tests
  # - simulator: ethereum/consensus
  #   clients:
  #     - besu
  #     - erigon
  #     - ethereumjs
  #     - go-ethereum
  #     - nethermind
  #     - nimbus-el
  #     - reth
  #   extra_flags:
  #     - --client.checktimelimit=3m
  #     - --sim.parallelism=4
  #     #- --sim.timelimit=2h

  # # Consume Engine
  # - simulator: ethereum/eest/consume-engine
  #   clients:
  #     - besu
  #     - erigon
  #     - ethereumjs
  #     - go-ethereum
  #     - nethermind
  #     - nimbus-el
  #     - reth
  #   extra_flags:
  #     - --client.checktimelimit=60s
  #     - --sim.parallelism=4
  #     #- --sim.timelimit=2h

  # # Consume RLP
  # - simulator: ethereum/eest/consume-rlp
  #   clients:
  #     - besu
  #     - erigon
  #     - ethereumjs
  #     - go-ethereum
  #     - nethermind
  #     - nimbus-el
  #     - reth
  #   extra_flags:
  #     - --client.checktimelimit=60s
  #     - --sim.parallelism=4
  #     - --client-file configs/prague.yaml
  #     #- --sim.timelimit=2h
