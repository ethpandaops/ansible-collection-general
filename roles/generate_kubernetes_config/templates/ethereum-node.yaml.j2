# {{ ansible_managed }}

{{ item.key }}:
  global:
    main:
      network: {{ ethereum_network_name }}
      engineEndpoint: {{ default_el_auth_endpoint }}
      rpcEndpoint: {{ default_el_endpoint }}
      beaconEndpoint: {{ default_cl_endpoint }}
    checkpointSync:
      enabled: {{ ethereum_node_cl_checkpoint_sync_enabled | lower }}
      addresses:
        {{ ethereum_network_name }}: {{ checkpoint_sync_url_kube }}
    clientArgs:
      networks:
        {{ ethereum_network_name }}:
          execution:
            besu:
            {%- for arg in besu_container_command_extra_args | default ([]) +%}
              {%- if arg.startswith('--ethstats=') +%}
              - --ethstats=k8s-{{ item.key }}:<path:/secrets/services/services.enc.yaml#ethereum | jsonPath {.testnets.{{ devnet_name }}-devnets.ethstats_secret}>@ethstats.{{ ethereum_network_name }}.{{ gen_kubernetes_domain }}:443
              {%- else +%}
              - {{ arg | replace('/network-config', '/data/network-config') }}
              {%- endif +%}
            {%- endfor +%}
            nethermind:
            {%- for arg in nethermind_container_command_extra_args | default ([]) +%}
              {%- if arg.startswith('--log=') +%}
              - --log=INFO
              {%- elif arg.startswith('--EthStats.Name=') +%}
              - --EthStats.Name=k8s-{{ item.key }}
              {%- elif arg.startswith('--EthStats.Secret=') +%}
              - --EthStats.Secret=<path:/secrets/services/services.enc.yaml#ethereum | jsonPath {.testnets.{{ devnet_name }}-devnets.ethstats_secret}>
              {%- else +%}
              - {{ arg | replace('/network-config', '/data/network-config') }}
              {%- endif +%}
            {%- endfor +%}
            geth:
            {%- for arg in geth_container_command_extra_args | default ([]) +%}
              {%- if arg.startswith('--ethstats=') +%}
              - --ethstats=k8s-{{ item.key }}:<path:/secrets/services/services.enc.yaml#ethereum | jsonPath {.testnets.{{ devnet_name }}-devnets.ethstats_secret}>@ethstats.{{ ethereum_network_name }}.{{ gen_kubernetes_domain }}
              {%- else +%}
              - {{ arg | replace('/network-config', '/data/network-config') }}
              {%- endif +%}
            {%- endfor +%}
              - --rpc.allow-unprotected-txs
            erigon:
            {%- for arg in erigon_container_command_extra_args | default ([]) +%}
              {%- if arg.startswith('--ethstats=') +%}
              - --ethstats=k8s-{{ item.key }}:<path:/secrets/services/services.enc.yaml#ethereum | jsonPath {.testnets.{{ devnet_name }}-devnets.ethstats_secret}>@ethstats.{{ ethereum_network_name }}.{{ gen_kubernetes_domain }}
              {%- else +%}
              - {{ arg | replace('/network-config', '/data/network-config') }}
              {%- endif +%}
            {%- endfor +%}
            ethereumjs:
            {%- for arg in ethereumjs_container_command_extra_args | default ([]) +%}
              - {{ arg | replace('/network-config', '/data/network-config') }}
            {%- endfor +%}
          consensus:
            lodestar:
            {%- for arg in lodestar_container_command_extra_args | default ([]) +%}
              - {{ arg | replace('/network-config', '/data/network-config') }}
            {%- endfor +%}
            teku:
            {%- for arg in teku_container_command_extra_args | default ([]) +%}
              {%- if arg.startswith('--validators') +%}
              {%- else +%}
              - {{ arg | replace('/network-config', '/data/network-config') }}
              {%- endif +%}
            {%- endfor +%}
            prysm:
            {%- for arg in prysm_container_command_extra_args | default ([]) +%}
              - {{ arg | replace('/network-config', '/data/network-config') }}
            {%- endfor +%}
            lighthouse:
            {%- for arg in lighthouse_container_command_extra_args | default ([]) +%}
              - {{ arg | replace('/network-config', '/data/network-config') }}
            {%- endfor +%}
            nimbus:
            {%- for arg in nimbus_container_command_extra_args | default ([]) +%}
              {%- if arg.startswith('--graffiti') +%}
              {%- else +%}
              - {{ arg | replace('/network-config', '/data/network-config') }}
              {%- endif +%}
            {%- endfor +%}


  {{ gen_kubernetes_config_ethereum_node.el }}:
    enabled: true
    fullnameOverride: {{ item.key.split('-')[1] + "-" + item.key.split('-')[0] + "-" + item.key.split('-')[2] }}
    image:
      repository: {{ default_ethereum_client_images[gen_kubernetes_config_ethereum_node.el] | split(':') | first }}
      tag: {{ default_ethereum_client_images[gen_kubernetes_config_ethereum_node.el] | split(':') | last }}
      pullPolicy: Always
    p2pNodePort:
      enabled: true
      port: {{ (32000 | random(start=31000, seed=ethereum_genesis_network_seed)) }}
    persistence:
      enabled: true
      size: 100Gi
    podLabels:
      network: {{ ethereum_network_name }}
      testnet: {{ ethereum_network_name }}
      ethereum_network: {{ ethereum_network_name }}
      ethereum_role: execution
      consensus_client: {{ gen_kubernetes_config_ethereum_node.cl }}
      execution_client: {{ gen_kubernetes_config_ethereum_node.el }}
      ethereum_instance: {{ item.key.split('-')[1] + "-" + item.key.split('-')[0] + "-" + item.key.split('-')[2] }}
    resources:
      requests:
        cpu: 2000m
        memory: 5Gi
      limits:
        cpu: 3000m
        memory: 7Gi
    initContainers:
      - name: init-config
        image: alpine:latest
        imagePullPolicy: IfNotPresent
        securityContext:
          runAsNonRoot: false
          runAsUser: 0
        command:
          - sh
          - -ace
          - >
            CHAINSPEC_URI=https://config.{{ network_subdomain }}/el/chainspec.json;
            GENESIS_URI=https://config.{{ network_subdomain }}/el/genesis.json;
            BESU_GENESIS_URI=https://config.{{ network_subdomain }}/el/besu.json;
            ENODES_URI=https://config.{{ network_subdomain }}/el/enodes.txt;
            mkdir -p /data/network-config;
            if ! [ -f /data/network_config_init_done ];
            then
              apk update && apk add curl jq;
              wget -O /data/network-config/chainspec.json $CHAINSPEC_URI;
              wget -O /data/network-config/genesis.json $GENESIS_URI;
              wget -O /data/network-config/besu.json $BESU_GENESIS_URI;
              wget -O /data/network-config/enodes.txt $ENODES_URI;
              cat /data/network-config/genesis.json | jq -r '.config.chainId' > /data/network-config/chainid.txt;
              touch /data/network_config_init_done;
              echo "network config init done";
            else
              echo "network config already present";
            fi;
            echo "bootnode init done: $(cat /data/network-config/enodes.txt)";
        volumeMounts:
          - name: storage
            mountPath: "/data"
{%- if gen_kubernetes_config_ethereum_node.el in ['geth','erigon'] +%}
      - name: init-genesis
        image: {{ default_ethereum_client_images[gen_kubernetes_config_ethereum_node.el] }}
        imagePullPolicy: Always
        securityContext:
          runAsNonRoot: false
          runAsUser: 0
        command:
          - sh
          - -ace
          - >
            if ! [ -f /data/genesis_init_done ];
            then
              {{ gen_kubernetes_config_ethereum_node.el }} init --datadir /data /data/network-config/genesis.json;
              touch /data/genesis_init_done;
              echo "genesis init done";
            else
              echo "genesis is already initialized";
            fi;
        volumeMounts:
          - name: storage
            mountPath: "/data"
{%- endif +%}

  {{ gen_kubernetes_config_ethereum_node.cl }}:
    enabled: true
    fullnameOverride: {{ item.key }}
    image:
      repository: {{ default_ethereum_client_images[gen_kubernetes_config_ethereum_node.cl] | split(':') | first }}
      tag: {{ default_ethereum_client_images[gen_kubernetes_config_ethereum_node.cl] | split(':') | last }}
      pullPolicy: Always
    mode: "beacon"
    p2pNodePort:
      enabled: true
      port: {{ (33000 | random(start=32000, seed=ethereum_genesis_network_seed)) }}
    podLabels:
      network: {{ ethereum_network_name }}
      testnet: {{ ethereum_network_name }}
      ethereum_network: {{ ethereum_network_name }}
      ethereum_role: consensus
      consensus_client: {{ gen_kubernetes_config_ethereum_node.cl }}
      execution_client: {{ gen_kubernetes_config_ethereum_node.el }}
      ethereum_instance: {{ item.key }}
    resources:
      requests:
        cpu: 2000m
        memory: 5Gi
      limits:
        cpu: 3000m
        memory: 7Gi
    persistence:
      enabled: true
      size: 200Gi
    initContainers:
    - name: init-genesis
      image: alpine:latest
      imagePullPolicy: IfNotPresent
      securityContext:
        runAsNonRoot: false
        runAsUser: 0
      command:
        - sh
        - -ace
        - >
          apk add jq curl sed;
          DEPOSIT_CONTRACT_URI=https://config.{{ network_subdomain }}/cl/deposit_contract.txt;
          DEPOSIT_CONTRACT_BLOCK_URI=https://config.{{ network_subdomain }}/cl/deposit_contract_block.txt;
          DEPOSIT_CONTRACT_BLOCK_HASH_URI=https://config.{{ network_subdomain }}/cl/deposit_contract_block_hash.txt;
          GENESIS_CONFIG_URI=https://config.{{ network_subdomain }}/cl/config.yaml;
          GENESIS_SSZ_URI=https://config.{{ network_subdomain }}/cl/genesis.ssz;
          mkdir -p /data/network-config;
          curl -s https://config.{{ network_subdomain }}/api/v1/nodes/inventory | jq -r '.ethereum_pairs[] | .consensus.enr' > /data/network-config/bootstrap_nodes.txt;
          if ! [ -f /data/network-config/genesis.ssz ];
          then
            wget -O /data/network-config/deposit_contract.txt $DEPOSIT_CONTRACT_URI;
            wget -O /data/network-config/deposit_contract_block.txt $DEPOSIT_CONTRACT_BLOCK_URI;
            wget -O /data/network-config/deposit_contract_block_hash.txt $DEPOSIT_CONTRACT_BLOCK_HASH_URI;
            wget -O /data/network-config/config.yaml $GENESIS_CONFIG_URI;
            wget -O /data/network-config/genesis.ssz $GENESIS_SSZ_URI;
            echo "genesis init done";
          else
            echo "genesis exists. skipping...";
          fi;
          (tr '\n' ',' < /data/network-config/bootstrap_nodes.txt | sed 's/[^,]*/"&"/g') > /data/network-config/bootstrap_nodes2.txt;
          mv /data/network-config/bootstrap_nodes2.txt /data/network-config/bootstrap_nodes.txt;
          echo "bootnode init done: $(cat /data/network-config/bootstrap_nodes.txt)";
      volumeMounts:
        - name: storage
          mountPath: "/data"
